import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators'; // ุงุณุชูุฑุฏ tap ุนุดุงู ูุญูุธ ุงูุชููู ุจุนุฏ ุงูููุฌูู

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  // ุชุฃูุฏ ุฅู ุงูู URL ุฏู ูู ุงูู Base URL ุงูุฎุงุต ุจุงูู API ุจุชุงุนู ูุนูููุงุช ุงูู Authentication
  private baseUrl = 'https://localhost:7083/api/Authentication';

  constructor(private http: HttpClient, private router: Router) {}

  /**
   * ุฏุงูุฉ ูุชุณุฌูู ุฏุฎูู ุงููุณุชุฎุฏู.
   * ุจุชููู ุจุฅุฑุณุงู ุจูุงูุงุช ุงูุงุนุชูุงุฏ (credentials) ููุจุงู ุฅูุฏ.
   * ุจุนุฏ ุงูุงุณุชุฌุงุจุฉ ุงููุงุฌุญุฉุ ุจุชููู ุจุญูุธ ุงูุชููู ูู ุงูู Local Storage.
   * @param credentials ูุงุฆู ูุญุชูู ุนูู ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู (ูุซูุงู: { username, password })
   * @returns Observable ูุญุชูู ุนูู ุงุณุชุฌุงุจุฉ ุงูู API (ุบุงูุจุงู ูุงุฆู ุจู ุงูุชููู)
   */
  login(credentials: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/Login`, credentials).pipe(
      // ุงุณุชุฎุฏุงู 'tap' ููุชุงุจุนุฉ ุงูุงุณุชุฌุงุจุฉ ูุญูุธ ุงูุชููู
      tap((response: any) => {
        if (response && response.token) {
          localStorage.setItem('token', response.token); // ๐ ุญูุธ ุงูุชููู ููุง ุจุฅุณู 'token'
          console.log('Token saved:', response.token);
        } else {
          console.warn('Login successful but no token found in response.');
        }
      })
    );
  }

  /**
   * ุฏุงูุฉ ูุชุณุฌูู ุฎุฑูุฌ ุงููุณุชุฎุฏู.
   * ุจุชููู ุจุญุฐู ุงูุชููู ูู ุงูู Local Storage ูุจุชูุฌู ุงููุณุชุฎุฏู ูุตูุญุฉ ุชุณุฌูู ุงูุฏุฎูู.
   */
  logout() {
    localStorage.removeItem('token'); // โ ุญุฐู ุงูุชููู ูู ุงูููุชุงุญ 'token'
    console.log('Token removed. User logged out.');
    this.router.navigate(['/login']);
  }

  /**
   * ุฏุงูุฉ ููุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุฌูุงู ููุฏุฎูู.
   * ุจุชุชุญูู ูู ูุฌูุฏ ุงูุชููู ูู ุงูู Local Storage.
   * @returns boolean true ูู ุงูุชููู ููุฌูุฏุ false ูู ูุด ููุฌูุฏ.
   */
  isLoggedIn(): boolean {
    return !!localStorage.getItem('token'); // โ ุงูุชุญูู ูู ูุฌูุฏ ุงูุชููู ูู ุงูููุชุงุญ 'token'
  }

  /**
   * ุฏุงูุฉ ูุงุณุชุฑุฌุงุน ุงูู JWT Token ูู ุงูู Local Storage.
   * ุฏู ุงูุฏุงูุฉ ุงููู SignalR service ูุชุณุชุฎุฏููุง ุนุดุงู ุชุญุตู ุนูู ุงูุชููู.
   * @returns string | null ุงูู JWT Token ุฃู null ูู ูุด ููุฌูุฏ.
   */
  public getToken(): string | null {
    return localStorage.getItem('token'); // ๐ ุชู ุชูุญูุฏ ุงุณู ุงูููุชุงุญ ุฅูู 'token'
  }

  /**
   * ุฏุงูุฉ ูุงุณุชุฎุฑุงุฌ ุงูู User ID ูู ุงูู JWT Token.
   * @returns string | null ุงูู User ID ุฃู null ูู ุงูุชููู ูุด ููุฌูุฏ ุฃู ุบูุฑ ุตุงูุญ.
   */
  getUserIdFromToken(): string | null {
    const token = localStorage.getItem('token'); // โ ุงุณุชุฎุฏุงู ุงูููุชุงุญ 'token'
    if (!token) return null;

    try {
      // ูู ุชุดููุฑ ุงูุฌุฒุก ุงูุฃูุณุท ูู ุงูุชููู (payload)
      const payload = JSON.parse(atob(token.split('.')[1]));
      // 'nameid' ูู ุงูู Claim Type ุงูุงูุชุฑุงุถู ูู UserId ูู .NET Identity ูุน JWT
      // 'sub' ูู ุงุฎุชุตุงุฑ ูู Subjectุ ููู ุบุงูุจุงู ุจููุซู ุงูู User ID ุฃูุถุงู.
      return payload?.nameid || payload?.sub || null;
    } catch (e) {
      console.error('Error decoding token:', e);
      return null;
    }
  }
}
